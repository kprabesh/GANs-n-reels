/**
 *  This function takes care of the entire music generation process
 * @returns {Promise<void>}
 */
async function generate(){

    // load model
    const model = await tf.loadLayersModel('assets/model.json');

    // generate random noise
    const noise = Array.from({length: 100}, () => Math.random());

    // predict notes
    const prediction = model.predict(tf.tensor(noise, [1,100])).dataSync();
    let notes = Array.from(prediction);

    // scale notes using ( (note * range) + half_max_pitch )
    let scaledNotes = notes.map(scale);

    // round notes to nearest integer
    let roundedNotes = scaledNotes.map(Math.round);

    //console.log('scaled', scaledNotes);
    //console.log('rounded', roundedNotes);

    // convert notes to d major scale
    let dMajorNotes = roundedNotes.map(note_to_d_major);
    //console.log(dMajorNotes);

    // convert notes to abc string
    let myString = convertToABC(dMajorNotes);

    // render and play the song
    renderABC('generateName','abcString','notation','player', myString);
    renderImage('canvasId', dMajorNotes);

    let comment = `This song composed using the random input: ` + noise;
    document.getElementById('noise').innerHTML = comment;

}

function renderImage(canvasId, array) {
    let canvas = document.getElementById(canvasId);
    let ctx = canvas.getContext('2d');
    let id = ctx.createImageData(64,4); // only do this once per page
    var d  = id.data;                        // only do this once per page
    console.log('generating', d);
    d[0]   = 100;
    d[1]   = 150    ;
    d[2]   = 250;
    d[3]   = 0;
    ctx.putImageData(id, 0, 0 );
}

/**
 * This function scales the note to the range seen in the sessions
 * @param {string} string - the string representing the abc notation of the song
 * @returns {none}
 */
function renderABC(nameId, elementId, notationId, playerId, string, qpm=120, program=1){
    // console.log(string)
    document.getElementById(nameId).innerHTML = string.split(':')[1].split('\n')[0];
    document.getElementById(elementId).innerHTML = string;
    ABCJS.renderAbc(notationId, string);
    ABCJS.renderMidi(
        playerId,
        string,
        {
            qpm: qpm,
            program: program,
            generateDownload: true,
            inlineControls: {
                loopToggle: true,
            },
        });
}

/**
 * This function scales the note to the range seen in the sessions
 * @param {number} note - the real value generated by gan in range of 0 and 1
 * @returns {number} the scaled value in range of 57 to 80
 */
function scale(note){
    let note_min = 53;
    let note_max = 93;
    let half_max_pitch = Math.floor((note_max + note_min) / 2);
    let pitch_range = note_max - half_max_pitch;
    return  (note * pitch_range) + half_max_pitch;
}


/**
 * This function forces a note to be in the D Major scale
 * @param {number} note - a real valued scaled note
 * @returns {number} - a note in the scale of D Major
 */
function note_to_d_major(note){
    const d_maj_values = [2,4,6,7,9,11,13];
    let octave = Math.floor(note / 12);
    let noteInScale = note % 12;
    let noteDistances = d_maj_values.map( function(value) {
        return Math.abs(value - noteInScale);
    });
    let roundedNote = d_maj_values[argMin(noteDistances)];
    return roundedNote + 12*octave;
}

/**
 * This function gives the index of the smallest value in an array using map-reduce method
 * @param array
 * @returns {*} - the smallest lexicographical value in the array
 */
function argMin(array) {
    return array.map((x, i) => [x, i]).reduce((r,a) => (a[0] > r[0] ? r : a))[1];
}

/**
 * This method converts each midi note to the correspoding abc string
 * @param {number} note - a midi note in D major scale
 * @returns {string} the corresponding note string
 */
function convertNoteToABC(note){
    const noteToABC = {
            54: 'F,',
            55: 'G,',
            57: 'A,',
            59: 'B,',
            61: 'C',
            62: 'D',
            64: 'E',
            66: 'F',
            67: 'G',
            69: 'A',
            71: 'B',
            73: 'c',
            74: 'd',
            76: 'e',
            78: 'f',
            79: 'g',
            81: 'a',
            83: 'b',
            85: 'c\'',
            86: 'd\'',
            88: 'e\'',
            90: 'f\''
        };
    return noteToABC[note];
}

/**
 * This function converts a sequence of midi notes to the corresponding abc string
 * @param {array} song - an array of midi notes
 * @returns {string} the corresponding abc string
 */
function convertToABC(song){

    // do a first pass converting all midi notes to corresponding chars
    let firstPass = song.map(convertNoteToABC);

    // split the chars to 16 notes per bar and 16 bars
    var splitBars = [];
    while(firstPass.length) splitBars.push(firstPass.splice(0,4));

    // go over each bar converting multiple occurrences of string to a number (i.e. eefff = e2 f3)
    //let barArray = [];
    let newArray = [];
    for (let eachBar of splitBars){
        let temp = eachBar[0];
        let occurences = 1;
        let barString = "";
        let count = 1;

        for (let x = 1; x < eachBar.length; x++){
             if (x === eachBar.length - 1){
                if (temp === eachBar[x]){
                    occurences += 1;
                    barString += temp + occurences;
                }
                else {
                    if (occurences > 1){
                        barString += temp + occurences + eachBar[x];
                    }
                    else {
                        barString += temp + eachBar[x];
                    }
                }
            }
            else if (temp !== eachBar[x]){
                if (occurences > 1){
                    barString += temp + occurences;
                }
                else {
                    barString += temp;
                }
                temp = eachBar[x];
                occurences = 1;
            }
            else {
                occurences += 1;
            }
        }
        newArray.push(barString);
        //barArray.push(barString)
    }

    let barArray = [];
    for (let i = 0; i < newArray.length; i += 4) {
        let str = newArray[i];
        barArray.push([str.concat(" ", newArray[i+1], " ", newArray[i+2], " ", newArray[i+3])])
    }

    // add it to the abc string
    let abcString = `T: GAN Morrison Generated\n` +
                    `C: GANs n Reels\n` +
                    `M: 4/4\n` +
                    `L: 1/16\n` +
                    `K: Dmaj\n` +
                    `|${barArray[0]}|${barArray[1]}|${barArray[2]}|${barArray[3]}|\n` +
                    `|${barArray[4]}|${barArray[5]}|${barArray[6]}|${barArray[7]}|\n` +
                    `|${barArray[8]}|${barArray[9]}|${barArray[10]}|${barArray[11]}|\n` +
                    `|${barArray[12]}|${barArray[13]}|${barArray[14]}|${barArray[15]}|`;

    return abcString
}

/**
 * This function allows one to download the abc string of a song as a .txt file
 * @params {none}
 * @returns {none}
 */
function download() {
    let filename = "abc_notation.txt";
    let element = document.createElement('a');
    let text = document.getElementById("abcString").innerHTML;
    let header = document.getElementById('noise').innerHTML;

    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text)
        + '\n\n' + encodeURIComponent(header));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

const song1 =
    `T: Freshwater Moose\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|f2e2e2fee2d2d4|ed3aga2a4fgf2|d2e2d4d3Be4|f2e2e2d2d4d4|\n` +
    `|fefee2fee2d2ed3|ededgfa2a4g2f2|e4d4d2Bde4|f2e2e2d2d4d4|\n` +
    `|e4e4fg3f4|a4a2g2e2d2d4|e4e4f2e2ef2g|a2f2efd2d4d4|\n` +
    `|e4e3fg4f4|a4b2a2e2d2d4|e4e3dd2e2e2f2|gfe2f2d2d4d4|`;

const song2 =
    `T: The Breezeway Way\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|e4e4efB2d4|f2e2f2e2gf3f2d2|B2d2d4d2A2d3B|fe3e2d2d4d4|\n` +
    `|e2fee2fee2dBd4|fefef3egf3f2d2|B2d2d4d2A2d4|fe3e2d2d2eded3|\n` +
    `|e2f2f4a4a2g2|ab3b2a2f2e2e2d2|e4e3fa2f2g2fg|a2f2f2e2d4ded2|\n` +
    `|f4f4a3ba2g2|b4b2a2g2f2f2e2|d3ee2dede3fefe|g2f2f2e2d2e2d4|`;

const song3 =
    `T: Pippy Park Puffin\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|e4e2fef2d2e2d2|e2d2f4a2f2f2e2|d4d4d2BAd4|e4e2d2d4d4|\n` +
    `|e4e2fefed2ed3|ededfef2a2gff2e2|dBd2d3Bd2B2dBed|fe3e2d2d4d4|\n` +
    `|e4f4a4a4|a4b2a2f2e2e2d2|e4e4g2e2f4|gaf2f2d2d4d4|\n` +
    `|e4f4a4a4|a3bb2a2f2e2e4|d4e3de2f2e2f2|a2fef2e2d4d4|`;

const song4 =
    `T: By The Bay\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|f4e2f2f2d2d4|e4f3eg2f2f2d2|d2e2d4d2B2d4|f2e2e2d2d4d4|\n` +
    `|fefefefefed2d4|e4fef2g2f2f2d2|d2e2d4d2B2d4|f2e2e2d2d4d4|\n` +
    `|e2f2f4a4a2g2|a4b2a2f2e2e2d2|e2d2d2e2g2e2f2ga|abf2f2d2d4d4|\n` +
    `|f2eff4a4gag2|a3bb2a2f2e2e2d2|d2e2e3de2f2e2f2|f2e2f2d2d4d4|`;

const song5 =
    `T: Pippy Place Puffin\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|g4f4e2d2e2de|f4a2b2b3d'a3b|g4f2e2f4a2g2|a2f2e2d2dBd2d4|\n` +
    `|gfg2f4e2d2eded|f4a2b2b2d'bb2a2|a2gaefeff3ga4|abfgefd2d4d4|\n` +
    `|e2d2d4f2g2e3f|a4a2f2d4d4|f4fef2b2f2a2d'2|d'2bd'gaded4d4|\n` +
    `|fed2ede2g2e2e2fe|a4a2f2d4eded|f2agg2bae2a2a2g2|e4e4d4d4|\n`;

const song6 =
    `T: Moustafa's Fav Song\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|G2FG F2EF D2E2 E2F2|DEG2 G2A2 d2GA d4|d2A2 B2G2 E2F2 A2d2|d4 f2d2 e2f2 f2d2|\n` +
    `|G2F2F2EFD2EDE2F2|DEGFG2A2dBG2D4|d2A2B2G2E2F2A2d2|d4f2d2e2dB ABde|\n` +
    `|f2d2d2e2g2e2gf2e|a2edg2a2a2e2e4|g3fe2feg2d2d4|age2F2B2d4B2e2|\n` +
    `|f2d2d2e2g2e2gfe2|a2e2gfa2a2e2e4|f2d'bd'2g2ag3f2e2|d4d2A2d2f2d2A2|\n`;

renderABC("song1","abcString1", "notation1", "player1", song6);

renderABC("song2","abcString2", "notation2", "player2", song2);

renderABC("song3","abcString3", "notation3", "player3", song5);
