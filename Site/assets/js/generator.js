/**
 *  This function takes care of the entire music generation process
 * @returns {Promise<void>}
 */
async function generate(){

    // load model
    const model = await tf.loadLayersModel('assets/model.json');

    // generate random noise
    const noise = Array.from({length: 100}, () => Math.random());

    // predict notes
    const prediction = model.predict(tf.tensor(noise, [1,100])).dataSync();
    let notes = Array.from(prediction);

    // scale notes
    let scaledNotes = notes.map(scale);

    // convert notes to d major scale
    let dMajorNotes = scaledNotes.map(note_to_d_major);

    // convert notes to abc string
    let myString = convertToABC(dMajorNotes);

    // render and play the song
    document.getElementById("abcString").innerHTML = myString;
    ABCJS.renderAbc('notation', myString);
    ABCJS.renderMidi('player', myString);
};

/**
 * This function scales the note to the range seen in the sessions
 * @param {number} note - the real value generated by gan in range of 0 and 1
 * @returns {number} the scaled value in range of 57 to 80
 */
function scale(note){
    return 0.5 * (80 - 57) * (note+1) + 57;
}

/**
 * This function forces a note to be in the D Major scale
 * @param {number} note - a real valued scaled note
 * @returns {number} - a note in the scale of D Major
 */
function note_to_d_major(note){
    const d_maj_values = [2,4,6,7,9,11,13];
    const octave = Math.floor(note / 12);
    const noteInScale = note % 12;
    const noteDistances = d_maj_values.map( function(value) {
        return Math.abs(value - noteInScale);
    });
    const roundedNote = d_maj_values[argMin(noteDistances)];
    return roundedNote + 12*octave;
}

/**
 * This function gives the index of the smallest value in an array using map-reduce method
 * @param array
 * @returns {*} - the smallest lexicographical value in the array
 */
function argMin(array) {
    return array.map((x, i) => [x, i]).reduce((r,a) => (a[0] > r[0] ? r : a))[1];
}

/**
 * This method converts each midi note to the correspoding abc string
 * @param {number} note - a midi note in D major scale
 * @returns {string} the corresponding note string
 */
function convertNoteToABC(note){
    const noteToABC = {
            62: 'd',
            64: 'e',
            66: 'f#',
            67: 'g',
            69: 'a',
            71: 'b',
            73: 'c#',
            74: 'd',
            76: 'e',
            78: 'f#',
            79: 'g'
        };
    return noteToABC[note];
};

/**
 * This function converts a sequence of midi notes to the corresponding abc string
 * @param {array} song - an array of midi notes
 * @returns {string} the corresponding abc string
 */
function convertToABC(song){

    // do a first pass converting all midi notes to corresponding chars
    let firstPass = song.map(convertNoteToABC);

    // split the chars to 16 notes per bar and 16 bars
    var splitBars = [];
    while(firstPass.length) splitBars.push(firstPass.splice(0,16));

    // go over each bar converting multiple occurrences of string to a number (i.e. eefff = e2 f3)
    let barArray = [];
    for (let eachBar of splitBars){
        let temp = eachBar[0];
        let occurences = 1;
        let barString = "";

        for (let x = 1; x < eachBar.length; x++){
            if (x === eachBar.length - 1){
                if (temp === eachBar[x]){
                    occurences += 1;
                    barString += temp + occurences;
                }
                else {
                    if (occurences > 1){
                        barString += temp + occurences + ' ' + eachBar[x];
                    }
                    else {
                        barString += temp + ' ' + eachBar[x];
                    }
                }
            }
            else if (temp !== eachBar[x]){
                if (occurences > 1){
                    barString += temp + occurences + ' ';
                }
                else {
                    barString += temp + ' ';
                }
                temp = eachBar[x];
                occurences = 1;
            }
            else {
                occurences += 1;
            }
        }
        barArray.push(barString);
    }

    // add it to the abc string
    var abcString = `T: GAN Generated Reel\n` +
                `M: 4/4\n` +
                `L: 1/16\n` +
                `R: reel\n` +
                `K: Dmaj\n` +
                `|:${barArray[0]}|${barArray[1]}|${barArray[2]}|${barArray[3]}|\n` +
                `${barArray[4]}|${barArray[5]}|${barArray[6]}|${barArray[7]}:|\n` +
                `|:${barArray[8]}|${barArray[9]}|${barArray[10]}|${barArray[11]}|\n` +
                `${barArray[12]}|${barArray[13]}|${barArray[14]}|${barArray[15]}:|`;

    return abcString
}


