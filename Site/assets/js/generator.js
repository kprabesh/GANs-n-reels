/**
 *  This function takes care of the entire music generation process
 * @returns {Promise<void>}
 */
async function generate(){

    // load model
    const model = await tf.loadLayersModel('assets/model.json');

    // generate random noise
    const noise = Array.from({length: 100}, () => Math.random());

    // predict notes
    const prediction = model.predict(tf.tensor(noise, [1,100])).dataSync();
    let notes = Array.from(prediction);

    // scale notes using ( (note * range) + half_max_pitch )
    let scaledNotes = notes.map(scale);

    // round notes to nearest integer
    let roundedNotes = scaledNotes.map(Math.round);

    //console.log('scaled', scaledNotes);
    //console.log('rounded', roundedNotes);

    // convert notes to d major scale
    let dMajorNotes = roundedNotes.map(note_to_d_major);
    //console.log(dMajorNotes);

    // convert notes to abc string
    let myString = convertToABC(dMajorNotes);

    // render and play the song
    renderABC('generateName','abcString','notation','player', myString);
}

/**
 * This function scales the note to the range seen in the sessions
 * @param {string} string - the string representing the abc notation of the song
 * @returns {none}
 */
function renderABC(nameId, elementId, notationId, playerId, string){
    document.getElementById(nameId).innerHTML = string.split(':')[1].split('\n')[0];
    document.getElementById(elementId).innerHTML = string;
    ABCJS.renderAbc(notationId, string);
    ABCJS.renderMidi(
        playerId,
        string,
        {
            qpm: 115,
            program: 21,
            generateDownload: true,
            inlineControls: {
                loopToggle: true,
            },
        });
}

/**
 * This function scales the note to the range seen in the sessions
 * @param {number} note - the real value generated by gan in range of 0 and 1
 * @returns {number} the scaled value in range of 57 to 80
 */
function scale(note){
    let note_min = 53;
    let note_max = 93;
    let half_max_pitch = Math.floor((note_max + note_min) / 2);
    let pitch_range = note_max - half_max_pitch;
    return  (note * pitch_range) + half_max_pitch;
}


/**
 * This function forces a note to be in the D Major scale
 * @param {number} note - a real valued scaled note
 * @returns {number} - a note in the scale of D Major
 */
function note_to_d_major(note){
    const d_maj_values = [2,4,6,7,9,11,13];
    let octave = Math.floor(note / 12);
    let noteInScale = note % 12;
    let noteDistances = d_maj_values.map( function(value) {
        return Math.abs(value - noteInScale);
    });
    let roundedNote = d_maj_values[argMin(noteDistances)];
    return roundedNote + 12*octave;
}

/**
 * This function gives the index of the smallest value in an array using map-reduce method
 * @param array
 * @returns {*} - the smallest lexicographical value in the array
 */
function argMin(array) {
    return array.map((x, i) => [x, i]).reduce((r,a) => (a[0] > r[0] ? r : a))[1];
}

/**
 * This method converts each midi note to the correspoding abc string
 * @param {number} note - a midi note in D major scale
 * @returns {string} the corresponding note string
 */
function convertNoteToABC(note){
    const noteToABC = {
            54: 'F,',
            55: 'G,',
            57: 'A,',
            59: 'B,',
            61: 'C,',
            62: 'D',
            64: 'E',
            66: 'F',
            67: 'G',
            69: 'A',
            71: 'B',
            73: 'C',
            74: 'd',
            76: 'e',
            78: 'f',
            79: 'g',
            81: 'a',
            83: 'b',
            85: 'c',
            86: 'd\'',
            88: 'e\'',
            90: 'f\''
        };
    return noteToABC[note];
};

/**
 * This function converts a sequence of midi notes to the corresponding abc string
 * @param {array} song - an array of midi notes
 * @returns {string} the corresponding abc string
 */
function convertToABC(song){

    // do a first pass converting all midi notes to corresponding chars
    let firstPass = song.map(convertNoteToABC);

    // split the chars to 16 notes per bar and 16 bars
    var splitBars = [];
    while(firstPass.length) splitBars.push(firstPass.splice(0,4));

    // go over each bar converting multiple occurrences of string to a number (i.e. eefff = e2 f3)
    let newArray = [];
    for (let eachBar of splitBars){
        let temp = eachBar[0];
        let occurences = 1;
        let barString = "";

        for (let x = 1; x < eachBar.length; x++){
            if (x === eachBar.length - 1){
                if (temp === eachBar[x]){
                    occurences += 1;
                    barString += temp + occurences;
                }
                else {
                    if (occurences > 1){
                        barString += temp + occurences + eachBar[x];
                    }
                    else {
                        barString += temp + eachBar[x];
                    }
                }
            }
            else if (temp !== eachBar[x]){
                if (occurences > 1){
                    barString += temp + occurences;
                }
                else {
                    barString += temp;
                }
                temp = eachBar[x];
                occurences = 1;
            }
            else {
                occurences += 1;
            }
        }
        newArray.push(barString);
    }

    var barArray = [];
    for (let i = 0; i < newArray.length; i += 4){
        let str = newArray[i];
        barArray.push([str.concat(newArray[i+1], newArray[i+2], newArray[i+3])])
    }
    // add it to the abc string
    var abcString = `T: GAN Morrison Generated\n` +
                    `C: GANs n Reels\n` +
                    `M: 4/4\n` +
                    `L: 1/16\n` +
                    `K: Dmaj\n` +
                    `|${barArray[0]}|${barArray[1]}|${barArray[2]}|${barArray[3]}|\n` +
                    `|${barArray[4]}|${barArray[5]}|${barArray[6]}|${barArray[7]}|\n` +
                    `|${barArray[8]}|${barArray[9]}|${barArray[10]}|${barArray[11]}|\n` +
                    `${barArray[12]}|${barArray[13]}|${barArray[14]}|${barArray[15]}|`;

    return abcString
}

function download() {
    var filename = "abc_notation.txt";
    var element = document.createElement('a');
    var text = document.getElementById("abcString").innerHTML;
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

const song1 =
    `T: Oxen Pond Road\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|a4a4g2f2f4|e4f2g2a2g2f2e2|d4f2b2b2a2f4|g2f2a2f2g2f2e4|\n` +
    `|fed2e'2fggaf2efg2|a4g2f2a2g2gab2|d'2e'2d'2ababa2a4|g2f2f4f4f4|\n` +
    `|a4b2g2g2f2f4|e4f2g2bag2f2e2|d4f2b2b2a2f4|g2f2a2f2g2f2e4|\n` +
    `e2d2d'2g2a2f2e2g2|a4g2f2a2g2a2b2|d'2e'2d'2a2b2a2a4|g2f2f4f4f2g2|`;

const song2 =
    `T: Bitters\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|g4g2f2f2d2d2B2|A4d2f2a2g2f2e2|d2e2f2b2a2g2e4|e2f2a2e2g4f2e2|\n` +
    `|BA3b2e2f2d2d2e2|gfg2fgf2b2g2a4|a2d'2b2a2g2fgg2ab|a2efef3fgf2f4|\n` +
    `|g4g2f2f2d2d2B2|A4d2f2bag2f2e2|d2e2f2b2a2gfe4|e2f2a2e2g4f2e2|\n` +
    `A4b2e2f2d2d2e2|gfg2g2f2b2g2a4|a2d'2b2a2g4g2b2|a2e2f4g2f2f2a2|`;

const song3 =
    `T: Long Pond Trail\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|b2d'2d'4b4b4|a4b4b2a2a2f2|f2a2b2d'2b2d'2a4|d'4e'2b2a4g4|\n` +
    `|d'4e'2gad'2b2fgbd'|d'2b2a2gad'2fga2d'2|e'2d'2a4b4b4|a2fgf2e2f4fe2f|\n` +
    `|b2d'2d'4b2a2b4|a4b4d'ba2a2f2|f2b2d'bd'2b4a4|d'4e'2b2a4g4|\n` +
    `d'2b2e'2a2d'2b2f2d'2|d'2b2a4d'2f2a2d'2|e'2d'2b2g2b4b4|a2f2f2e2f4f2a2|`;

const song4 =
    `T: By The Bay\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|a4g4g2f2e4|d4f2a2d'2a2b2ag|f4a2d'2b2a2f2e2|e2f2a2e2g2f2e2d2|\n` +
    `|d2B2d'2f2fgfgf2a2|a4a4d'2a2b4|d'4d'2abb2a2a4|g2eff2e2f4f2g2|\n` +
    `|a4a2g2g2f2e4|d4f2a2d'2a2b2g2|f4a2d'2b2a2f2e2|e2f2a2e2g2f2e2d2|\n` +
    `d2B2d'2f2g4f2a2|a4a4d'2a2b4|d'4d'2a2b2a2a4|g2e2f4f4f2a2|`;

const song5 =
    `T: The Breezeway Way\n` +
    `C: GANs n Reels\n` +
    `M: 4/4\n` +
    `L: 1/16\n` +
    `K: Dmaj\n` +
    `|a4a2g2f2e2d4|B2A2d2e2f2d2d4|A2d2d2a2f2g2e2f2|g2f2b2f2g4g4|\n` +
    `|e2d2d'2fggae2f2g2|b4a2e2g2e2f2a2|a2b2abg2ef3f2a2|a2f2f4f2e2e4|\n` +
    `|a4a2g2f2e2d4|B2A2d2e2f2d2d4|A2d2e2a2f2g2e2f2|g2f2bafeg4gf3|\n` +
    `e2d2d'2g2a2fef2g2|b4a2e2g2e2f2a2|a2b2a2g2e2f2f2a2|a2f2f4f2e2e2f2|`;



renderABC("song1","abcString1", "notation1", "player1", song5);

renderABC("song2","abcString2", "notation2", "player2", song4);

renderABC("song3","abcString3", "notation3", "player3", song3);
